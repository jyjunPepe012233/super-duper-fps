//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.11.2
//     from Assets/Input/PlayerAction.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @PlayerAction: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @PlayerAction()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""PlayerAction"",
    ""maps"": [
        {
            ""name"": ""CharacterBehaviour"",
            ""id"": ""6b7dec57-bce7-46f9-a5d9-8545f30a5d53"",
            ""actions"": [
                {
                    ""name"": ""Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""937d0254-6be9-49e8-b2bc-2fe5c660b502"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Sprint"",
                    ""type"": ""Button"",
                    ""id"": ""191296bc-15a9-4dac-8ed4-a23a56ca27e8"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Aim"",
                    ""type"": ""Button"",
                    ""id"": ""eb087be0-cfe6-4eb7-b260-70b0eb74275a"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Scroll Weapon"",
                    ""type"": ""Value"",
                    ""id"": ""782d0a4b-e5c9-49a0-8054-9786281be572"",
                    ""expectedControlType"": ""Axis"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Attack"",
                    ""type"": ""Button"",
                    ""id"": ""d85a14d5-5817-4b21-b943-a0e053510db9"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""b2543798-eb0a-4347-8289-c3f2b52f6aac"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Toogle Fire Mode"",
                    ""type"": ""Button"",
                    ""id"": ""afabfca2-6b8c-43b7-957d-31af179012a4"",
                    ""expectedControlType"": """",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector [Keyboard]"",
                    ""id"": ""b2a76210-1245-4766-a867-fb849b81d223"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""b00c7c6a-82d0-4caf-acaa-5d9728a27d1a"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""1213e370-206d-4902-94e4-f7a884613d46"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""01495f00-22dd-4a55-89b6-f30e00f07de7"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""2ca14c93-80a8-4119-831d-3c613fe275e7"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""743020a9-dd44-461c-a9b0-b7e975b25f5f"",
                    ""path"": ""<Keyboard>/shift"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Sprint"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""0c9ff5de-7618-4f26-9ee2-f825c0e97b54"",
                    ""path"": ""<Mouse>/rightButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Aim"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""9295b64c-eb5a-4af5-9b10-5683330c2f5f"",
                    ""path"": ""<Mouse>/scroll/x"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""b129fe90-da12-4e7e-9993-3a9e39f16f57"",
                    ""path"": ""<Mouse>/scroll/y"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Scroll Weapon"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""df482735-82e0-48a2-8fa2-80cb06850615"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Attack"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""6f1f6cd0-ec6f-42db-8849-d338d836b214"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""dc72264e-6f5c-499a-b9a6-c357ab23e564"",
                    ""path"": ""<Keyboard>/v"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Toogle Fire Mode"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        },
        {
            ""name"": ""Camera"",
            ""id"": ""09f19a94-1f22-4450-a0fa-4e37708a4fda"",
            ""actions"": [
                {
                    ""name"": ""Mouse Move"",
                    ""type"": ""PassThrough"",
                    ""id"": ""2745460f-e471-4ec1-878b-de959bdec43e"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                }
            ],
            ""bindings"": [
                {
                    ""name"": """",
                    ""id"": ""6294022e-31b3-4f14-9d2a-1af9c1926ed5"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Mouse Move"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // CharacterBehaviour
        m_CharacterBehaviour = asset.FindActionMap("CharacterBehaviour", throwIfNotFound: true);
        m_CharacterBehaviour_Move = m_CharacterBehaviour.FindAction("Move", throwIfNotFound: true);
        m_CharacterBehaviour_Sprint = m_CharacterBehaviour.FindAction("Sprint", throwIfNotFound: true);
        m_CharacterBehaviour_Aim = m_CharacterBehaviour.FindAction("Aim", throwIfNotFound: true);
        m_CharacterBehaviour_ScrollWeapon = m_CharacterBehaviour.FindAction("Scroll Weapon", throwIfNotFound: true);
        m_CharacterBehaviour_Attack = m_CharacterBehaviour.FindAction("Attack", throwIfNotFound: true);
        m_CharacterBehaviour_Reload = m_CharacterBehaviour.FindAction("Reload", throwIfNotFound: true);
        m_CharacterBehaviour_ToogleFireMode = m_CharacterBehaviour.FindAction("Toogle Fire Mode", throwIfNotFound: true);
        // Camera
        m_Camera = asset.FindActionMap("Camera", throwIfNotFound: true);
        m_Camera_MouseMove = m_Camera.FindAction("Mouse Move", throwIfNotFound: true);
    }

    ~@PlayerAction()
    {
        UnityEngine.Debug.Assert(!m_CharacterBehaviour.enabled, "This will cause a leak and performance issues, PlayerAction.CharacterBehaviour.Disable() has not been called.");
        UnityEngine.Debug.Assert(!m_Camera.enabled, "This will cause a leak and performance issues, PlayerAction.Camera.Disable() has not been called.");
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // CharacterBehaviour
    private readonly InputActionMap m_CharacterBehaviour;
    private List<ICharacterBehaviourActions> m_CharacterBehaviourActionsCallbackInterfaces = new List<ICharacterBehaviourActions>();
    private readonly InputAction m_CharacterBehaviour_Move;
    private readonly InputAction m_CharacterBehaviour_Sprint;
    private readonly InputAction m_CharacterBehaviour_Aim;
    private readonly InputAction m_CharacterBehaviour_ScrollWeapon;
    private readonly InputAction m_CharacterBehaviour_Attack;
    private readonly InputAction m_CharacterBehaviour_Reload;
    private readonly InputAction m_CharacterBehaviour_ToogleFireMode;
    public struct CharacterBehaviourActions
    {
        private @PlayerAction m_Wrapper;
        public CharacterBehaviourActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @Move => m_Wrapper.m_CharacterBehaviour_Move;
        public InputAction @Sprint => m_Wrapper.m_CharacterBehaviour_Sprint;
        public InputAction @Aim => m_Wrapper.m_CharacterBehaviour_Aim;
        public InputAction @ScrollWeapon => m_Wrapper.m_CharacterBehaviour_ScrollWeapon;
        public InputAction @Attack => m_Wrapper.m_CharacterBehaviour_Attack;
        public InputAction @Reload => m_Wrapper.m_CharacterBehaviour_Reload;
        public InputAction @ToogleFireMode => m_Wrapper.m_CharacterBehaviour_ToogleFireMode;
        public InputActionMap Get() { return m_Wrapper.m_CharacterBehaviour; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CharacterBehaviourActions set) { return set.Get(); }
        public void AddCallbacks(ICharacterBehaviourActions instance)
        {
            if (instance == null || m_Wrapper.m_CharacterBehaviourActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CharacterBehaviourActionsCallbackInterfaces.Add(instance);
            @Move.started += instance.OnMove;
            @Move.performed += instance.OnMove;
            @Move.canceled += instance.OnMove;
            @Sprint.started += instance.OnSprint;
            @Sprint.performed += instance.OnSprint;
            @Sprint.canceled += instance.OnSprint;
            @Aim.started += instance.OnAim;
            @Aim.performed += instance.OnAim;
            @Aim.canceled += instance.OnAim;
            @ScrollWeapon.started += instance.OnScrollWeapon;
            @ScrollWeapon.performed += instance.OnScrollWeapon;
            @ScrollWeapon.canceled += instance.OnScrollWeapon;
            @Attack.started += instance.OnAttack;
            @Attack.performed += instance.OnAttack;
            @Attack.canceled += instance.OnAttack;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
            @ToogleFireMode.started += instance.OnToogleFireMode;
            @ToogleFireMode.performed += instance.OnToogleFireMode;
            @ToogleFireMode.canceled += instance.OnToogleFireMode;
        }

        private void UnregisterCallbacks(ICharacterBehaviourActions instance)
        {
            @Move.started -= instance.OnMove;
            @Move.performed -= instance.OnMove;
            @Move.canceled -= instance.OnMove;
            @Sprint.started -= instance.OnSprint;
            @Sprint.performed -= instance.OnSprint;
            @Sprint.canceled -= instance.OnSprint;
            @Aim.started -= instance.OnAim;
            @Aim.performed -= instance.OnAim;
            @Aim.canceled -= instance.OnAim;
            @ScrollWeapon.started -= instance.OnScrollWeapon;
            @ScrollWeapon.performed -= instance.OnScrollWeapon;
            @ScrollWeapon.canceled -= instance.OnScrollWeapon;
            @Attack.started -= instance.OnAttack;
            @Attack.performed -= instance.OnAttack;
            @Attack.canceled -= instance.OnAttack;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
            @ToogleFireMode.started -= instance.OnToogleFireMode;
            @ToogleFireMode.performed -= instance.OnToogleFireMode;
            @ToogleFireMode.canceled -= instance.OnToogleFireMode;
        }

        public void RemoveCallbacks(ICharacterBehaviourActions instance)
        {
            if (m_Wrapper.m_CharacterBehaviourActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICharacterBehaviourActions instance)
        {
            foreach (var item in m_Wrapper.m_CharacterBehaviourActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CharacterBehaviourActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CharacterBehaviourActions @CharacterBehaviour => new CharacterBehaviourActions(this);

    // Camera
    private readonly InputActionMap m_Camera;
    private List<ICameraActions> m_CameraActionsCallbackInterfaces = new List<ICameraActions>();
    private readonly InputAction m_Camera_MouseMove;
    public struct CameraActions
    {
        private @PlayerAction m_Wrapper;
        public CameraActions(@PlayerAction wrapper) { m_Wrapper = wrapper; }
        public InputAction @MouseMove => m_Wrapper.m_Camera_MouseMove;
        public InputActionMap Get() { return m_Wrapper.m_Camera; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(CameraActions set) { return set.Get(); }
        public void AddCallbacks(ICameraActions instance)
        {
            if (instance == null || m_Wrapper.m_CameraActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_CameraActionsCallbackInterfaces.Add(instance);
            @MouseMove.started += instance.OnMouseMove;
            @MouseMove.performed += instance.OnMouseMove;
            @MouseMove.canceled += instance.OnMouseMove;
        }

        private void UnregisterCallbacks(ICameraActions instance)
        {
            @MouseMove.started -= instance.OnMouseMove;
            @MouseMove.performed -= instance.OnMouseMove;
            @MouseMove.canceled -= instance.OnMouseMove;
        }

        public void RemoveCallbacks(ICameraActions instance)
        {
            if (m_Wrapper.m_CameraActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ICameraActions instance)
        {
            foreach (var item in m_Wrapper.m_CameraActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_CameraActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public CameraActions @Camera => new CameraActions(this);
    public interface ICharacterBehaviourActions
    {
        void OnMove(InputAction.CallbackContext context);
        void OnSprint(InputAction.CallbackContext context);
        void OnAim(InputAction.CallbackContext context);
        void OnScrollWeapon(InputAction.CallbackContext context);
        void OnAttack(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
        void OnToogleFireMode(InputAction.CallbackContext context);
    }
    public interface ICameraActions
    {
        void OnMouseMove(InputAction.CallbackContext context);
    }
}
